subprojects { subproject ->
    apply plugin: 'xcode'
    apply plugin: 'xctest'

    group = 'org.gradle.swift-samples'

    // Move the build directories for all projects into a single top-level directory
    buildDir = rootProject.file("build/${subproject.name.capitalize()}")

    components.withType(ProductionSwiftComponent) {
        // By convention, source files are located in the root directory/Sources/<module>
        source.from rootProject.file("Sources/${subproject.name.capitalize()}")
    }

    components.withType(SwiftXCTestSuite) {
        // By convention, test source files are located in the root directory/Tests/<module>Tests
        linuxMainWorkaround(subproject, rootProject.file("Tests/${subproject.name.capitalize()}Tests"))
    }
}

project(':app') {
    apply plugin: 'swift-application'

    application {
        // Configure the dependencies of the executable
        dependencies {
            implementation project(':utilities')
        }
    }
}

project(':utilities') {
    apply plugin: 'swift-library'

    library {
        // Configure the dependencies of the library
        dependencies {
            api project(':list')
        }
    }
}

project(':list') {
    apply plugin: 'swift-library'
}

def linuxMainWorkaround(Project project, File testDir) {
    project.xctest {
        source.from project.fileTree(dir: testDir, include: '**/*.swift', exclude: 'LinuxMain.swift')
    }

    if (System.properties['os.name'].equals("Linux")) {
        // On linux, rename LinuxMain.swift -> main.swift
        def renameLinuxMain = project.tasks.create("renameLinuxMain", Sync) {
            from testDir
            into temporaryDir
            include 'LinuxMain.swift'
            rename { 'main.swift' }        
        }
        project.xctest {
            source.from renameLinuxMain
        } 
    }
}

allprojects { p ->
    // Work around for https://github.com/gradle/gradle-native/issues/376
    // TODO: Remove this once issue has been fixed.
    tasks.withType(UnexportMainSymbol) {
        doFirst {
            p.projectDir.mkdirs()
        }
    }
    tasks.withType(AbstractLinkTask) {
        doFirst {
            p.projectDir.mkdirs()
        }
    }
}
